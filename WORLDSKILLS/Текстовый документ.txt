import sys
from PyQt6 import QtWidgets as qtw
from PyQt6 import QtGui as qtg
from PyQt6 import QtCore as qtc


class MainWindow(qtw.QWidget):

	events = {
		qtc.QDate: {
			'title': "String title of event",
			'category': "String category of event",
			'time': (None if "All Day" else qtc.QTime()),
			'detail': "String details of event"
		}
	}

	def __init__(self):
		"""MainWindow constructor"""
		super().__init__()
		self.setWindowTitle("My Calendar App")
		self.resize(800, 600)

		# creating widgets
		self.calendar = qtw.QCalendarWidget()
		self.event_list = qtw.QListWidget()
		self.event_title = qtw.QLineEdit()
		self.event_category = qtw.QComboBox()
		self.event_time = qtw.QTimeEdit(qtc.QTime(8, 0))
		self.all_day_check = qtw.QCheckBox('All Day')
		self.event_detail = qtw.QTextEdit()
		self.add_button = qtw.QPushButton('Add/Update')
		self.del_button = qtw.QPushButton('Delete')
		self.all_day_check.toggled.connect(self.event_time.setDisabled)

		# Add event categories
		self.event_category.addItems(['Select category...', 'New...', 'Work',
									  'Meeting', 'Doctor', 'Family'])
		# disable the first category item
		self.event_category.model().item(0).setEnabled(False)

		# app layout's
		main_layout = qtw.QHBoxLayout()
		self.setLayout(main_layout)
		main_layout.addWidget(self.calendar)
		right_layout = qtw.QVBoxLayout()
		main_layout.addLayout(right_layout)
		right_layout.addWidget(qtw.QLabel('Events on Date'))
		right_layout.addWidget(self.event_list)
		event_form = qtw.QGroupBox('Event')
		right_layout.addWidget(event_form)
		event_form_layout = qtw.QGridLayout()
		event_form.setLayout(event_form_layout)
		event_form_layout.addWidget(self.event_title, 1, 1, 1, 3)
		event_form_layout.addWidget(self.event_category, 2, 1)
		event_form_layout.addWidget(self.event_time, 2, 2, )
		event_form_layout.addWidget(self.all_day_check, 2, 3)
		event_form_layout.addWidget(self.event_detail, 3, 1, 1, 3)
		event_form_layout.addWidget(self.add_button, 4, 2)
		event_form_layout.addWidget(self.del_button, 4, 3)

		# size policies
		self.calendar.setSizePolicy(qtw.QSizePolicy.Policy.Expanding, qtw.QSizePolicy.Policy.Expanding)
		self.event_list.setSizePolicy(qtw.QSizePolicy.Policy.Expanding, qtw.QSizePolicy.Policy.Expanding)

		# connections
		self.calendar.selectionChanged.connect(self.populate_list)
		self.event_list.itemSelectionChanged.connect(self.populate_form)
		self.add_button.clicked.connect(self.save_event)
		self.del_button.clicked.connect(self.delete_event)
		self.event_list.itemSelectionChanged.connect(self.check_delete_button)
		self.check_delete_button()

		self.show()

	# utility and custom slots
	def clear_form(self):
		"""This method goes through the fields in our form and sets them all to default values."""
		self.event_title.clear()
		self.event_category.setCurrentIndex(0)
		self.event_time.setTime(qtc.QTime(8, 0))
		self.all_day_check.setChecked(False)
		self.event_detail.setPlainText('')

	def populate_list(self):
		"""Repopulate the event_list widget with the events from that day.
			It starts by clearing the list and the form.
			It then retrieves the selected date from the calendar widget using its selectedDate() method."""
		self.event_list.clear()
		self.clear_form()
		date = self.calendar.selectedDate()
		for event in self.events.get(date, []):
			time = (
				event['time'].toString('hh:mm')
				if event['time'] else 'All Day'
			)
			self.event_list.addItem(f"{time}: {event['title']}")

	def populate_form(self):
		self.clear_form()
		date = self.calendar.selectedDate()
		event_number = self.event_list.currentRow()
		if event_number == -1:
			return
		event_data = self.events.get(date)[event_number]
		self.event_category.setCurrentText(event_data['category'])

		if event_data['time'] is None:
			self.all_day_check.setChecked(True)
		else:
			self.event_time.setTime(event_data['time'])
		self.event_title.setText(event_data['title'])
		self.event_detail.setPlainText(event_data['detail'])

	def save_event(self):
		event = {
			'category': self.event_category.currentText(),
			'time': (None if self.all_day_check.isChecked() else self.event_time.time()),
			'title': self.event_title.text(),
			'detail': self.event_detail.toPlainText()
			}
		date = self.calendar.selectedDate()
		event_list = self.events.get(date, [])
		event_number = self.event_list.currentRow()

		# determining if new event is and adding or an update
		if event_number == -1:      # not in event_list, so append it
			event_list.append(event)
		else:       # is an update to existing event
			event_list[event_number] = event

		event_list.sort(key=lambda x: x['time'] or qtc.QTime(0, 0))
		self.events[date] = event_list
		self.populate_list()

	def delete_event(self):
		date = self.calendar.selectedDate()
		row = self.event_list.currentRow()
		del(self.events[date][row])
		self.event_list.setCurrentRow(-1)
		self.clear_form()
		self.populate_list()

	def check_delete_button(self):
		self.del_button.setDisabled(self.event_list.currentRow() == -1)

	def add_category(self, category):
		self.event_category.addItem(category)
		self.event_category.setCurrentText(category)

	def on_category_change(self, text):
		if text == 'New...':
			dialog = self.CategoryWindow()
			dialog.submitted.connect(self.add_category)
			self.event_category.setCurrentIndex(0)


class CategoryWindow(qtw.QWidget):

	submitted = qtc.pyqtSignal(str)

	def __init__(self):
		super().__init__(None, modal=True)
		self.setLayout(qtw.QVBoxLayout())
		self.layout().addWidget(qtw.QLabel('Please enter a new category name:'))
		self.category_entry = qtw.QLineEdit()
		self.layout().addWidget(self.category_entry)
		self.submit_button = qtw.QPushButton('Submit', clicked=self.onSubmit())
		self.layout().addWidget(self.submit_button)
		self.cancel_button = qtw.QPushButton('Cancel', clicked=self.close())
		self.layout().addWidget(self.cancel_button)
		self.show()

	@qtc.pyqtSlot()
	def onSubmit(self):
		if self.category_entry.text():
			self.submitted.emit(self.category_entry.text())
		self.close()


if __name__ == '__main__':
	app = qtw.QApplication(sys.argv)
	mw = MainWindow()
	sys.exit(app.exec())